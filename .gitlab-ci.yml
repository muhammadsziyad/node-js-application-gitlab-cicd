variables:
    IMAGE_NAME: muhammadsziyad/docker-nodejs-fullstack-backend:v1
    CONTAINER_NAME : web

stages:
  - test
  - docker_check
  - build
  - deploy

run_test:
  stage: test
  image: bitnami/node
  before_script:
    - npm install @babel/core @babel/preset-env @babel/register jest supertest express
  script:
    - npm test

lint_test:
  stage: test
  image: bitnami/node
  before_script:
    - npm install eslint @eslint/js eslint-plugin-jest
  script:
    - npx eslint .


check_if_container_exists:
  stage: docker_check
  image: docker:latest  # Use Docker to run this job
  services:
    - docker:27.2-dind  # Docker-in-Docker service
  script:
    - echo "Checking if container exists..."
    # Check if container is already running
    - if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
        echo "Container is already running.";
      else
        echo "Container is not running.";
      fi
    # Check if container exists but is stopped
    - if [ $(docker ps -aq -f status=exited -f name=$CONTAINER_NAME) ]; then
        echo "Container exists but is stopped.";
        echo "Removing stopped container...";
        docker rm $CONTAINER_NAME;
      fi


build_images:
  stage: build
  image: docker
  services:
    - docker:27.2-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME .
    - docker push $IMAGE_NAME


deploy:
  stage: deploy
  before_script:
    - chmod 400 $SSH_KEY
    - 
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY root@202.10.41.81 "
        docker login -u $REGISTRY_USER -p $REGISTRY_PASS &&
        sh check.sh $CONTAINER_NAME
        docker run -d --name web -p 3000:3000 $IMAGE_NAME" 

#docker ps -aq | xargs docker stop | xargs docker rm &&
## docker stop $(docker ps -a -q) ; docker rm $(docker ps -a -q) &&

